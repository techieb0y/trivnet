Trivnet 2.7 by KD8GBL (Peter Corbett, peter@corbettdigital.net)

This is the 145.67 / MN Packet Network's re-written version of KB8ZQZ's
TrivnetDB. The original was in perl; this version is in PHP and uses a
somewhat more dynamic database design and provides some extra features.

Setup instructions:

* Required Packages (for Debian Squeeze/6.0; names for other distros may vary)
	apache2.2-bin
	postgresql-8.4
	postgresql-client-8.4
	postgresql-contrib-8.4
	php5
	php5-cli
	php5-gd
	php5-pgsql

Postgres 9.x is also known to work, but uses different processes for installing the tablefunc add-ons.
	
Base install:
-----------------------------------

* Create a 'trivnet' databse, owned by a PostgreSQL user of 'trivnet'. Set a password.
* Add a line to /etc/postgresql/8.4/main/pg_hba.conf:
	local   trivnet         trivnet                         md5
* Restart postgres

* Extract trivnet.tar.bz2 into /var/www/trivnet/.
* Edit /var/www/trivnet/includes/config.php with the password set above (under $DB_PASS)

* Run:
	psql -U trivnet trivnet < /var/www/trivnet/setup.sql
	psql -U trivnet trivnet < /usr/share/postgresql/8.4/contrib/tablefunc.sql

Populate the FCC database:
-----------------------------------

* Download:
	http://wireless.fcc.gov/uls/data/complete/l_amat.zip
	..and extract the EN.dat and HD.dat files. Copy these into /tmp
	Run: php /var/www/trivnet/util/fcc-util.php /tmp
	Note the output filename (/tmp/load-xxxx)

* Run (as the postgres user):
	psql trivnet
		set client_encoding latin1;
		copy "part97" from file "/tmp/load-xxxx";


Additional database setup specific to the Twin Cities Marathon is in mtcm.sql.

Set up the batch process crontab:
-----------------------------------

* Create a crontab entry (www-data for a default install of mod_php; a specific trivnet user if suPHP is in use.)
	* * * * * /usr/bin/php /var/www/trivnet/async.php --runonce


Log into the system
-----------------------------------
When you browse to the trivnet site, you'll be prompted to log in. Use an FCC-issued callsign, or the word 'guest'.


Set up the dataase fields
-----------------------------------
On the admin page, under the Datatypes tab, you can add fields to the system. There aren't any datatypes defined by default, just the database key (personID). This Data Types tab is where you add more. Each data type (field name) has a short name and a long name -- the short name should be one word, preferably all lower case; this is used for the packet side of things.  The web interface uses the long name ('label') everywhere. Exact Match is for things like marathon bib numbers; without it, searches will also return a partial/substring match.

If you have a field like a bib number that's a guarenteed-present, guarenteed-unique value, you can take the ID number and put it in the "$config["multidefault"]" line in .../includes/config.inc. This is used for the multi-edit mode, and as a default for batch edit. You'll see a key icon on that line in the Data Types tab when that's set.


Populating the dataase (marathon runners or similar roster)
-----------------------------------
In typical applications, a CSV file is imported using the Bulk Import section (again under Admin on the top-level menu). You can upload a file here, or you can pick a file that's been copied manually to the .../csvdata/ folder on the server. Either way, it'll guess if it's comma-separated or tab-separted, and move onto to matching input columns with the data types you set up above. You'll be shown the first few lines of the file, and a drop-down menu for each column it extracted from the data file.  Once you've got things matched up, click Import. That sets up an import job -- you should have a Bulk Data Import job visible under the 'Async Jobs' tab on the admin screen. These are processed by the async.php script via the crontab entry set above.

On the Async Jobs page, the 'filename' link returns the input file; clicking the link under Job State provides an error log for that job.
